Complete Axon Interview Solution

from collections import deque
input = "O_X_;X_XT;____"
dirs = [ [0,1], [0,-1], [1,0], [-1,0] ]
def bfs(input):
    grid, length, width, _i, _j = stringToMatrix(input)
    q = deque([[_i, _j,0]])
    visited = set([(_i, _j)])

    while q:
        cur_i,cur_j,length = q.popleft()
        if grid[cur_i][cur_j] == "T":
            return length
        # print((cur_i,cur_j), end=" ")
        for dir in dirs:
            i = cur_i + dir[0]
            j = cur_j + dir[1]
            if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or (i, j) in visited or  grid[i][j] == "X":
                continue
            visited.add((i, j))
            q.append([i, j,length + 1])

def stringToMatrix(input):
    length = 0
    width = 0
    for i in range(len(input)):
        if input[i] != ";":
            length += 1
        else:
            break
    for i in range(len(input)):
        if input[i] == ";":
            width += 1
    width +=1

    matrix = [[0 for i in range(length)] for j in range(width)]
    index = 0
    new_input = input.replace(";","")
    start_x = 0
    start_y = 0
    for i in range(width):
        for j in range(length):
            if new_input[index] == "O":
                start_x,start_y = j,i
            matrix[i][j] = new_input[index]
            index += 1
    return (matrix,length,width,start_x,start_y)


print(bfs(input))



[(1,4),(4.2),(9,5)]






//////////BackTracking Version

from collections import deque
input = "O__;_XT;___"
# input = "O_X_;X_XT;____"
dirs = [ [0,1], [0,-1], [1,0], [-1,0] ]
def bfs(input):
    grid, length, width, _i, _j = stringToMatrix(input)
    q = deque([[_i, _j,0]])
    visited = set([(_i, _j)])
    backtrack_matrix = [[None for i in range(length)] for j in range(width)]

    backtrack_matrix[_i][_j] = 0

    while q:
        cur_i,cur_j,length = q.popleft()
        if grid[cur_i][cur_j] == "T":
            print([cur_i,cur_j])
            print(backtrack_matrix)
            list = getBackTrackList(backtrack_matrix,cur_i,cur_j)
            return [length,list]
        # print((cur_i,cur_j), end=" ")
        for dir in dirs:
            i = cur_i + dir[0]
            j = cur_j + dir[1]
            if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or (i, j) in visited or  grid[i][j] == "X":
                continue
            visited.add((i, j))
            q.append([i, j,length + 1])
            backtrack_matrix[i][j] = [cur_i,cur_j]

def stringToMatrix(input):
    length = 0
    width = 0
    for i in range(len(input)):
        if input[i] != ";":
            length += 1
        else:
            break
    for i in range(len(input)):
        if input[i] == ";":
            width += 1
    width +=1

    matrix = [[0 for i in range(length)] for j in range(width)]
    index = 0
    new_input = input.replace(";","")
    start_x = 0
    start_y = 0
    for i in range(width):
        for j in range(length):
            if new_input[index] == "O":
                start_x,start_y = j,i
            matrix[i][j] = new_input[index]
            index += 1
    return (matrix,length,width,start_x,start_y)

def getBackTrackList(matrix,final_i,final_j):
    list = []
    list.append([final_i,final_j])
    while matrix[final_i][final_j] != 0:
        final_i,final_j = matrix[final_i][final_j]
        list.append([final_i,final_j])
    list.reverse()
    return list



print(bfs(input))



[(1,4),(4.2),(9,5)]
